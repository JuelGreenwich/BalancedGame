using System.Buffers.Text;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using Unity.VisualScripting;
using UnityEditor.PackageManager.UI;
using UnityEditor;
using UnityEngine;
using UnityEngine.SocialPlatforms.Impl;
using UnityEngine.UIElements;
using static TMPro.SpriteAssetUtilities.TexturePacker_JsonArray;
using static UnityEngine.UIElements.UxmlAttributeDescription;
using System;
using UnityEngine.AI;

public class RabbitAI : MonoBehaviour
{
    // Guidline on the parameters (repost from the discord server's AI development channel)
    //    Parameteres:
    //Health bar
    //Power level
    //Speed
    //    Predator score
    //    Max Life time

    //Healh bar - Basic representation of hunger and state of the damage animal has taken, can be regenerated by food, the lower the health is the more likely animal is to search for food/hunt

    //Power level - Strength of an animal, animals with higher power levels are more likely to prioritise the animals with low power levels for example fox can be 4, rabbit 0 and bear 15.

    //Speed - EVERYONE KNOWS WHAT SPEED IS

    //Agression - the higher the score the more likely the animal is to hunt rather than use vegetarion options(% based. 0% for rabbits, 100% for tigers)

    //Max life time - score that gets lowered over time, maybe take 1 point away each 120 frames or so when the score is lowered to 5%, animal stops hunting or looking for food, goes to a "nest" if there is one and PEACFULLY in NO INHUMANE WAY WHAT SO EVER dies.




    //Serialized only for the sake of testing, can be de serealized later if needed
    [SerializeField]
    private Transform target;
    private float health;
    private float power;
    private float speed;
    private float agression;
    private float maxLifetime;
    private float lifeStart;
    private float maxHealth;
    private bool isBusy = false;
    private float distanceToFood = 0f;


    [SerializeField]
    private float healthDegen = 0.5f;

    // Start is called before the first frame update
    void Start()
    {
        InvokeRepeating("HealthDegen", 1f, 1f);
        maxHealth = 10f;
        health = 10f;
        power = 0f;
        speed = 5f;
        agression = 0f;
        maxLifetime = 15f;
        lifeStart = Time.realtimeSinceStartup;
    }

    // Update is called once per frame
    void Update()
    {
        //print(isBusy);

        if (Time.realtimeSinceStartup - lifeStart > maxLifetime || health < 0)
        {
            DeathSequence();
        }

        print(health);

        if (isBusy == false)
        {
            if (health < maxHealth)
            {
                print("MoveTowardsFood was called");
                MoveTowardsFood();
            }
        }

        if (isBusy == true)
        {
            if (TargetReached())
            {
                isBusy = false;
            }
        }

        //print(GetComponent<NavMeshAgent>().destination);

    }



    private bool TargetReached()
    {
        Vector3 difference = transform.position - GetComponent<NavMeshAgent>().destination;
        float distance = difference.sqrMagnitude;
        if (distance < 1f)
        {
            return true;
        }

        else
        {
            return false;
        }
    }

    private void MoveTowardsFood()
    {
        GameObject[] foodSources;
        foodSources = GameObject.FindGameObjectsWithTag("Vegetable");
        GameObject food = null;

        Vector3 position = transform.position;
        foreach (GameObject source in foodSources)
        {
            Vector3 distance = source.transform.position - position;
            float squaredDistance = distance.sqrMagnitude;

            if (squaredDistance > distanceToFood)
            {
                food = source;
                distanceToFood = squaredDistance;

            }

        }
        NavMeshAgent navAgent = GetComponent<NavMeshAgent>();

        print(food.transform.position);

        isBusy = true;
        navAgent.destination = food.transform.position;
    }

    private void DeathSequence()
    {
        Destroy(gameObject);
    }

    void HealthDegen()
    {
        health = health - healthDegen;
    }


    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.tag == "Vegetable")
        {
            Destroy(collision.gameObject);
            isBusy = false;
            health += 5f;
            if (health > maxHealth)
            {
                health = maxHealth;
            }
        }
    }
}
